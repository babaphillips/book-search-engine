{"version":3,"sources":["utils/auth.js","utils/API.js","utils/localStorage.js","utils/mutations.js","utils/queries.js","pages/SearchBooks.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","getMe","fetch","headers","authorization","deleteBook","bookId","method","removeBookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","ADD_USER","gql","LOGIN","SAVE_BOOK","GET_ME","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","update","cache","me","readQuery","query","writeQuery","data","savedBooks","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","userData","setUserData","userDataLength","Object","keys","user","getUserData","handleDeleteBook","updatedUser","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f5318de.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($input: savedBooks!) {\r\n    saveBook(input: $input) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: ID!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME = gql`\r\n  query me {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\nimport { GET_ME } from \"../utils/queries\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: { book: bookToSave },\r\n        update: (cache) => {\r\n          const { me } = cache.readQuery({ query: GET_ME });\r\n          cache.writeQuery({\r\n            query: GET_ME,\r\n            data: { me: { ...me, savedBooks: [...me.savedBooks, bookToSave] } },\r\n          });\r\n        },\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport { getMe, deleteBook } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nconst SavedBooks = () => {\r\n  const [userData, setUserData] = useState({});\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n\r\n  useEffect(() => {\r\n    const getUserData = async () => {\r\n      try {\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n        if (!token) {\r\n          return false;\r\n        }\r\n\r\n        const response = await getMe(token);\r\n\r\n        if (!response.ok) {\r\n          throw new Error('something went wrong!');\r\n        }\r\n\r\n        const user = await response.json();\r\n        setUserData(user);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getUserData();\r\n  }, [userDataLength]);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await deleteBook(bookId, token);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      setUserData(updatedUser);\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (!userDataLength) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { LOGIN } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser] = useMutation(LOGIN);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"id_token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path=\"/book-search-engine/\" component={SearchBooks} />\r\n            <Route exact path=\"/saved\" component={SavedBooks} />\r\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}